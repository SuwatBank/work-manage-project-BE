generator client {
  provider = "prisma-client-js"
  // For crate folder generate
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int             @id @default(autoincrement())
  userName   String          @unique
  password   String          @db.VarChar(255)
  firstName  String          @db.VarChar(255)
  lastName   String          @db.VarChar(255)
  createAt   DateTime        @default(now()) @db.Timestamp(0)
  updateAt   DateTime        @updatedAt @db.Timestamp(0)
  phoneNo    String          @unique @db.VarChar(10)
  email      String          @unique @db.VarChar(100)
  role       Role            @default(USER)
  department String          @db.VarChar(255)
  project    UserOnProject[]
  Task       Task?           @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId     Int?
  UserOnTask UserOnTask[]
}

enum Role {
  USER
  LEADER
  ADMIN
}

model ProjectList {
  id       Int             @id @default(autoincrement())
  user     UserOnProject[]
  name     String
  priority Int
  detail   String          @db.VarChar(255)
  createAt DateTime        @default(now()) @db.Timestamp(0)
  updateAt DateTime        @updatedAt @db.Timestamp(0)
  assignor Int
  dueDate  DateTime
  task     Task[]
}

model UserOnProject {
  ProjectList   ProjectList @relation(fields: [projectListId], references: [id], onDelete: Cascade)
  projectListId Int
  User          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int

  @@id([projectListId, userId])
}

model Task {
  id            Int          @id @default(autoincrement())
  name          String
  detail        String
  priority      Int
  createAt      DateTime     @default(now()) @db.Timestamp(0)
  updateAt      DateTime     @updatedAt @db.Timestamp(0)
  dueDate       DateTime
  status        Status[]
  ProjectList   ProjectList  @relation(fields: [projectListId], references: [id], onDelete: Cascade)
  projectListId Int
  assignTo      UserOnTask[]
  User          User[]
}

model UserOnTask {
  Task   Task @relation(fields: [taskId], references: [id])
  taskId Int
  User   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  @@id([taskId, userId])
}

model Status {
  id            Int           @id @default(autoincrement())
  taskStatus    TaskStatus    @default(ONGOING)
  projectStatus ProjectStatus @default(ONGOING)
  createAt      DateTime      @default(now()) @db.Timestamp(0)
  updateAt      DateTime      @updatedAt @db.Timestamp(0)
  feedback      String?
  attachFile    String?
  Task          Task          @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId        Int
}

enum TaskStatus {
  ONGOING
  ONAPPROVE
  COMPLETED
  APPROVE
  REJECT
}

enum ProjectStatus {
  ONGOING
  COMPLETED
  PENDING
  OVERDUE
}
